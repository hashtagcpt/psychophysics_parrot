function [m,b] = zENfit(data, init, options)% LINEFIT  Fit a line to x,y data%% [m,b] = linfit(data, init, options)%% This function fits a dataset with the equation:%%      y = m(x) + b           %%% <data> is a Nx2 matrix in which each row is a data point.%% <init> is a 2x1 matrix that provides an initial guess for the parameters% m and b (slope and intercept).  It takes the form [m b].  This is an optional% argument.%% <options> is a vector of options used by fminsearch.m.  This is an optional% argument.% set default argumentsif nargin<2     init=[1 0];endif nargin<3     options=[];     enddata = data'; % put data into a format fminsearch likes.% set options for minimizationTolX=10e-16;       %parameter toleranceTolFun=10e-16;       %parameter toleranceMaxFunEvals = 10e2; %maximum number of function evaluations  MaxIter = 10e5;     %maximum number of iterations% set options structure using optimset - type "help optimset" toOptions = optimset('TolX', TolX, 'TolFun', TolFun, 'MaxFunEvals', MaxFunEvals, 'MaxIter', MaxIter);%call function that sets the equation to be minimize - here lineerrfno=inline('zENerrfn(x,P1)','x','P1');  %Run fminsearch, which uses a simplex search (Nelder-Mead) algorithm to find function%minima. A technical explanation is here:%   http://www.scholarpedia.org/article/Nelder-Mead_algorithm[v,fval,exitflag]=fminsearch(o,init,Options,data);%[v,fval,exitflag]=fminsearch(o,init,Options,data);m=v(1); %return the slopeb=v(2); %return the interceptreturn;