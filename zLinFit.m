function [b,m] = zlinfit( data, init, options )% LINFIT  Find a linear fit to data%% [b,m] = linfit( data, init, options )%% This function fits a dataset with a line:%%      y = m(x-b)           %%% <data> is a 2xN matrix in which each column is a data point, [ x ; y ]% e.g., data=[ 1 2 3 4 5 6 7 8 9  10 ; ...%              1 1 1 1 3 5 7 9 11 13 ];%% <init> is a 3x1 matrix that provides an initial guess for the parameters% a, b, and m.  It takes the form [ a ; b ; m ].  This is an optional% argument.%% <options> is a vector of options used by fmins.m.  This is an optional% argument.% set default argumentif nargin<2, init=[ 5  1]; endif nargin<3, options=[];     end% set options for minimization%opt=foptions;opt(2)=10e-8;  %parameter toleranceopt(3)=10e-8;  %error toleranceopt(14)=10e10;  %maximum number of iterationsMaxFunEvals = 10e3;MaxIter = 10e3;Options = optimset('TolX', opt(2), 'MaxFunEvals', MaxIter, 'MaxIter', MaxIter);% minimize error functiono=inline('zLinErrfn(x,P1)','x','P1');[v,fval,exitflag]=fminsearch(o,init,Options,data);exitflagb=v(1);m=v(2);return